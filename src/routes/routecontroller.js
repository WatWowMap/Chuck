'use strict';

const POGOProtos = require('pogo-protos');

const config = require('../services/config.js');
const Consumer = require('../services/consumer.js');
const ipcWorker = require('../ipc/worker.js');
const Account = require('../models/account.js');
const Device = require('../models/device.js');
const Instance = require('../models/instance.js');
const { sendResponse, base64_decode } = require('../services/utils.js');

/*
const RequestMessages = {
    UnSet: 0,
	GetPlayerProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PLAYER, // 2
	GetHoloholoInventoryProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_HOLOHOLO_INVENTORY, // 4
	DownloadSettingsActionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DOWNLOAD_SETTINGS, // 5
	GetGameMasterClientTemplatesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DOWNLOAD_ITEM_TEMPLATES, // 6
	GetRemoteConfigVersionsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DOWNLOAD_REMOTE_CONFIG_VERSION, // 7
	RegisterBackgroundDeviceActionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_REGISTER_BACKGROUND_DEVICE, // 8
	GetPlayerDayProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PLAYER_DAY, // 9
	AcknowledgePunishmentProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ACKNOWLEDGE_PUNISHMENT, // 10
	GetServerTimeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_SERVER_TIME, // 11
	GetLocalTimeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_LOCAL_TIME, // 12
	FortSearchProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FORT_SEARCH, // 101
	EncounterProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ENCOUNTER, // 102
	CatchPokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CATCH_POKEMON, // 103
	FortDetailsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FORT_DETAILS, // 104
	GetMapObjectsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MAP_OBJECTS, // 106
	FortDeployProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FORT_DEPLOY_POKEMON, // 110
	FortRecallProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FORT_RECALL_POKEMON, // 111
	ReleasePokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_RELEASE_POKEMON, // 112
	UseItemPotionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_POTION, // 113
	UseItemCaptureProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_CAPTURE, // 114
	UseItemReviveProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_REVIVE, // 116
	PlayerProfileProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PLAYER_PROFILE, // 121
	EvolvePokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_EVOLVE_POKEMON, // 125
	GetHatchedEggsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_HATCHED_EGGS, // 126
	EncounterTutorialCompleteProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ENCOUNTER_TUTORIAL_COMPLETE, // 127
	LevelUpRewardsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LEVEL_UP_REWARDS, // 128
	CheckAwardedBadgesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHECK_AWARDED_BADGES, // 129
	RecycleItemProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_RECYCLE_INVENTORY_ITEM, // 137
	CollectDailyBonusProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COLLECT_DAILY_BONUS, // 138
	UseItemXpBoostProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_XP_BOOST, // 139
	UseItemEggIncubatorProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_EGG_INCUBATOR, // 140
	UseIncenseActionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_INCENSE, // 141
	GetIncensePokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_INCENSE_POKEMON, // 142
	IncenseEncounterProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_INCENSE_ENCOUNTER, // 143
	AddFortModifierProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ADD_FORT_MODIFIER, // 144
	DiskEncounterProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DISK_ENCOUNTER, // 145
	UpgradePokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPGRADE_POKEMON, // 147
	SetFavoritePokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_FAVORITE_POKEMON, // 148
	NicknamePokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_NICKNAME_POKEMON, // 149
	EquipBadgeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_EQUIP_BADGE, // 150
	SetContactSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_CONTACT_SETTINGS, // 151
	SetBuddyPokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_BUDDY_POKEMON, // 152
	GetBuddyWalkedProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_BUDDY_WALKED, // 153
	UseItemEncounterProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_ENCOUNTER, // 154
	GymDeployProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GYM_DEPLOY, // 155
	GymGetInfoProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GYM_GET_INFO, // 156
	GymStartSessionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GYM_START_SESSION, // 157
	GymBattleAttackProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GYM_BATTLE_ATTACK, // 158
	JoinLobbyProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_JOIN_LOBBY, // 159
	LeaveLobbyProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LEAVE_LOBBY, // 160
	SetLobbyVisibilityProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_LOBBY_VISIBILITY, // 161
	SetLobbyPokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_LOBBY_POKEMON, // 162
	GetRaidDetailsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_RAID_DETAILS, // 163
	GymFeedPokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GYM_FEED_POKEMON, // 164
	StartRaidBattleProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_START_RAID_BATTLE, // 165
	AttackRaidBattleProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ATTACK_RAID, // 166
	UseItemStardustBoostProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_STARDUST_BOOST, // 168
	ReassignPlayerProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_REASSIGN_PLAYER, // 169
	ConvertCandyToXlCandyProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CONVERT_CANDY_TO_XL_CANDY, // 171
	IsSkuAvailableProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_IS_SKU_AVAILABLE, // 172
	AssetDigestRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_ASSET_DIGEST, // 300
	DownloadUrlRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_DOWNLOAD_URLS, // 301
	AssetVersionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_ASSET_VERSION, // 302
	ClaimCodenameRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CLAIM_CODENAME, // 403
	SetAvatarProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_AVATAR, // 404
	SetPlayerTeamProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_PLAYER_TEAM, // 405
	MarkTutorialCompleteProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_MARK_TUTORIAL_COMPLETE, // 406
	CheckChallengeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHECK_CHALLENGE, // 600
	VerifyChallengeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_VERIFY_CHALLENGE, // 601
	EchoProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ECHO, // 666
	RegisterSfidaRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_REGISTRATION, // 800
	SfidaCertificationRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_CERTIFICATION, // 802
	SfidaUpdateRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_UPDATE, // 803
	SfidaDowserRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_DOWSER, // 805
	SfidaCaptureRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_CAPTURE, // 806
	ListAvatarCustomizationsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LIST_AVATAR_CUSTOMIZATIONS, // 807
	SetAvatarItemAsViewedProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_AVATAR_ITEM_AS_VIEWED, // 808
	GetInboxV2Proto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_INBOX, // 809
	ListGymBadgesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LIST_GYM_BADGES, // 811
	GetGymBadgeDetailsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_GYM_BADGE_DETAILS, // 812
	UseItemMoveRerollProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_MOVE_REROLL, // 813
	UseItemRareCandyProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_RARE_CANDY, // 814
	AwardFreeRaidTicketProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_AWARD_FREE_RAID_TICKET, // 815
	FetchAllNewsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FETCH_ALL_NEWS, // 816
	MarkReadNewsArticleProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_MARK_READ_NEWS_ARTICLE, // 817
	GetPlayerSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PLAYER_DISPLAY_INFO, // 818
	BelugaTransactionStartProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_BELUGA_TRANSACTION_START, // 819
	BelugaTransactionCompleteProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_BELUGA_TRANSACTION_COMPLETE, // 820
	SfidaAssociateRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_ASSOCIATE, // 822
	SfidaCheckPairingRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_CHECK_PAIRING, // 823
	SfidaDisassociateRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_DISASSOCIATE, // 824
	WainaSubmitSleepDataRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_WAINA_SUBMIT_SLEEP_DATA, // 826
	GetNewQuestsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_NEW_QUESTS, // 900
	GetQuestDetailsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_QUEST_DETAILS, // 901
	RemoveQuestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_REMOVE_QUEST, // 903
	QuestEncounterProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_QUEST_ENCOUNTER, // 904
	ProgressQuestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PROGRESS_QUEST, // 906
	SendGiftProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SEND_GIFT, // 950
	OpenGiftProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_GIFT, // 951
	DeleteGiftProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DELETE_GIFT, // 953
	SavePlayerSnapshotProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SAVE_PLAYER_SNAPSHOT, // 954
	CheckSendGiftProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHECK_SEND_GIFT, // 956
	SetFriendNicknameProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_FRIEND_NICKNAME, // 957
	DeleteGiftFromInventoryProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DELETE_GIFT_FROM_INVENTORY, // 958
	SaveSocialPlayerSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SAVE_SOCIAL_PLAYER_SETTINGS, // 959
	ShareExRaidPassProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SHARE_EX_RAID_PASS, // 960
	CheckShareExRaidPassProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHECK_SHARE_EX_RAID_PASS, // 961
	DeclineExRaidPassProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DECLINE_SHARED_EX_RAID_PASS, // 962
	OpenTradingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_TRADING, // 970
	UpdateTradingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPDATE_TRADING, // 971
	ConfirmTradingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CONFIRM_TRADING, // 972
	CancelTradingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CANCEL_TRADING, // 973
	GetTradingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_TRADING, // 974
	GetFitnessRewardsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_FITNESS_REWARDS, // 980
	GetCombatPlayerProfileProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_COMBAT_PLAYER_PROFILE, // 990
	GenerateCombatChallengeIdProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GENERATE_COMBAT_CHALLENGE_ID, // 991
	CreateCombatChallengeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CREATE_COMBAT_CHALLENGE, // 992
	OpenCombatChallengeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_COMBAT_CHALLENGE, // 993
	GetCombatChallengeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_COMBAT_CHALLENGE, // 994
	AcceptCombatChallengeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ACCEPT_COMBAT_CHALLENGE, // 995
	DeclineCombatChallengeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DECLINE_COMBAT_CHALLENGE, // 996
	CancelCombatChallengeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CANCEL_COMBAT_CHALLENGE, // 997
	SubmitCombatChallengePokemonsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SUBMIT_COMBAT_CHALLENGE_POKEMONS, // 998
	SaveCombatPlayerPreferencesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SAVE_COMBAT_PLAYER_PREFERENCES, // 999
	OpenCombatSessionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_COMBAT_SESSION, // 1000
	UpdateCombatProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPDATE_COMBAT, // 1001
	QuitCombatProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_QUIT_COMBAT, // 1002
	GetCombatResultsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_COMBAT_RESULTS, // 1003
	UnlockPokemonMoveProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UNLOCK_SPECIAL_MOVE, // 1004
	GetNpcCombatRewardsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_NPC_COMBAT_REWARDS, // 1005
	CombatFriendRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMBAT_FRIEND_REQUEST, // 1006
	OpenNpcCombatSessionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_NPC_COMBAT_SESSION, // 1007
	StartTutorialProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_START_TUTORIAL_ACTION, // 1008
	GetTutorialEggProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_TUTORIAL_EGG_ACTION, // 1009
	SendProbeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SEND_PROBE, // 1020
	CheckPhotobombProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHECK_PHOTOBOMB, // 1101
	ConfirmPhotobombProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CONFIRM_PHOTOBOMB, // 1102
	GetPhotobombProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PHOTOBOMB, // 1103
	EncounterPhotobombProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ENCOUNTER_PHOTOBOMB, // 1104
	GetGmapSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_SIGNED_GMAP_URL_DEPRECATED, // 1105
	ChangeTeamProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHANGE_TEAM, // 1106
	GetWebTokenProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_WEB_TOKEN, // 1107
	CompleteSnapshotSessionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMPLETE_SNAPSHOT_SESSION, // 1110
	CompleteWildSnapshotSessionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMPLETE_WILD_SNAPSHOT_SESSION, // 1111
	StartIncidentProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_START_INCIDENT, // 1200
	CompleteInvasionDialogueProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_INVASION_COMPLETE_DIALOGUE, // 1201
	OpenInvasionCombatSessionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_INVASION_OPEN_COMBAT_SESSION, // 1202
	UpdateInvasionBattleProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_INVASION_BATTLE_UPDATE, // 1203
	InvasionEncounterProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_INVASION_ENCOUNTER, // 1204
	PurifyPokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PURIFY_POKEMON, // 1205
	GetRocketBalloonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_ROCKET_BALLOON, // 1206
	StartRocketBalloonIncidentProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_START_ROCKET_BALLOON_INCIDENT, // 1207
	VsSeekerStartMatchmakingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_VS_SEEKER_START_MATCHMAKING, // 1300
	CancelMatchmakingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CANCEL_MATCHMAKING, // 1301
	GetMatchmakingStatusProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MATCHMAKING_STATUS, // 1302
	CompleteVsSeekerAndRestartChargingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMPLETE_VS_SEEKER_AND_RESTART_CHARGING, // 1303
	GetVsSeekerStatusProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_VS_SEEKER_STATUS, // 1304
	CompleteCompetitiveSeasonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMPLETE_COMBAT_COMPETITIVE_SEASON_ACTION, // 1305
	ClaimVsSeekerRewardsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CLAIM_VS_SEEKER_REWARDS, // 1306
	VsSeekerRewardEncounterProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_VS_SEEKER_REWARD_ENCOUNTER, // 1307
	ActivateVsSeekerProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ACTIVATE_VS_SEEKER, // 1308
	BuddyMapProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_BUDDY_MAP, // 1350
	BuddyStatsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_BUDDY_STATS, // 1351
	BuddyFeedingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FEED_BUDDY, // 1352
	OpenBuddyGiftProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_BUDDY_GIFT, // 1353
	BuddyPettingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PET_BUDDY, // 1354
	GetBuddyHistoryProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_BUDDY_HISTORY, // 1355
	UpdateRouteDraftProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPDATE_ROUTE_DRAFT, // 1400
	GetMapFortsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MAP_FORTS, // 1401
	SubmitRouteDraftProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SUBMIT_ROUTE_DRAFT, // 1402
	GetPublishedRoutesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PUBLISHED_ROUTES, // 1403
	StartRouteProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_START_ROUTE, // 1404
	GetRoutesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_ROUTES, // 1405
	ProgressRouteProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PROGRESS_ROUTE, // 1406
	ProcessRouteWaypointInteractionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PROCESS_ROUTE_WAYPOINT_INTERACTION, // 1407
	ProcessRouteTappableProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PROCESS_ROUTE_TAPPABLE, // 1408
	ListRouteBadgesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LIST_ROUTE_BADGES, // 1409
	CancelRouteProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CANCEL_ROUTE, // 1410
	CreateBuddyMultiplayerSessionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CREATE_BUDDY_MUTLIPLAYER_SESSION, // 1456
	JoinBuddyMultiplayerSessionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_JOIN_BUDDY_MULTIPLAYER_SESSION, // 1457
	LeaveBuddyMultiplayerSessionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LEAVE_BUDDY_MULTIPLAYER_SESSION, // 1458
	GetTodayViewProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_TODAY_VIEW, // 1501
	MegaEvolvePokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_MEGA_EVOLVE_POKEMON, // 1502
	RemoteGiftPingRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_REMOTE_GIFT_PING, // 1503
	SendRaidInvitationProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SEND_RAID_INVITATION, // 1504
	GetDailyEncounterProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_DAILY_ENCOUNTER, // 1601
	DailyEncounterProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DAILY_ENCOUNTER, // 1602
	OpenSponsoredGiftProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_SPONSORED_GIFT, // 1650
	SavePlayerPreferencesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SAVE_PLAYER_PREFERENCES, // 1652
	ProfanityCheckProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PROFANITY_CHECK, // 1653
	GetTimedGroupChallengeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_TIMED_GROUP_CHALLENGE, // 1700
	GetNintendoAccountProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_NINTENDO_ACCOUNT, // 1710
	UnlinkNintendoAccountProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UNLINK_NINTENDO_ACCOUNT, // 1711
	GetNintendoOAuth2UrlProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_NINTENDO_OAUTH2_URL, // 1712
	TransferPokemonToPokemonHomeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_TRANSFER_TO_POKEMON_HOME, // 1713
	ReportAdFeedbackRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_REPORT_AD_FEEDBACK, // 1716
	CreatePokemonTagProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CREATE_POKEMON_TAG, // 1717
	DeletePokemonTagProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DELETE_POKEMON_TAG, // 1718
	EditPokemonTagProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_EDIT_POKEMON_TAG, // 1719
	SetPokemonTagsForPokemonProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_POKEMON_TAGS_FOR_POKEMON, // 1720
	GetPokemonTagsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_POKEMON_TAGS, // 1721
	ChangePokemonFormProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHANGE_POKEMON_FORM, // 1722
	ChooseGlobalTicketedEventVariantProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHOOSE_EVENT_VARIANT, // 1723
	GetReferralCodeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_REFERRAL_CODE, // 1800
	AddReferrerProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ADD_REFERRER, // 1801
	SendFriendInviteViaReferralCodeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SEND_FRIEND_INVITE_VIA_REFERRAL_CODE, // 1802
	GetMilestonesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MILESTONES, // 1803
	MarkMilestoneAsViewedProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_MARK_MILESTONES_AS_VIEWED, // 1804
	GetMilestonesPreviewProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MILESTONES_PREVIEW, // 1805
	CompleteMilestoneProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMPLETE_MILESTONE, // 1806
	GetGeofencedAdProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_GEOFENCED_AD, // 1820
	CreatePostcardProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CREATE_POSTCARD, // 1910
	UpdatePostcardProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPDATE_POSTCARD, // 1911
	DeletePostcardProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DELETE_POSTCARD, // 1912
	GetMementoListProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MEMENTO_LIST, // 1913
	UploadRaidClientLogProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPLOAD_RAID_CLIENT_LOG, // 1914
	PushNotificationRegistryProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REGISTER_PUSH_NOTIFICATION, // 5000
	UpdateNotificationProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_UPDATE_NOTIFICATION_STATUS, // 5002
	DownloadGmTemplatesRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_DOWNLOAD_GAME_MASTER_TEMPLATES, // 5004
	GetInventoryProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_INVENTORY, // 5005
	RedeemPasscodeRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REDEEM_PASSCODE, // 5006
	PingRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_PING, // 5007
	AddLoginActionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_ADD_LOGIN_ACTION, // 5008
	RemoveLoginActionProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REMOVE_LOGIN_ACTION, // 5009
	SubmitNewPoiProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_ADD_NEW_POI, // 5011
	ProxyRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_PROXY_SOCIAL_ACTION, // 5012
	GetAvailableSubmissionsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_AVAILABLE_SUBMISSIONS, // 5014
	PurchaseSkuProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_PURCHASE_SKU, // 5019
	GetAvailableSkusAndBalancesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_AVAILABLE_SKUS_AND_BALANCES, // 5020
	RedeemGoogleReceiptProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REDEEM_GOOGLE_RECEIPT, // 5021
	RedeemAppleReceiptProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REDEEM_APPLE_RECEIPT, // 5022
	GetFitnessReportProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_FITNESS_REPORT, // 5025
	ClientTelemetrySettingsRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_CLIENT_TELEMETRY_SETTINGS, // 5026
	SetInGameCurrencyExchangeRateProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_SET_IN_GAME_CURRENCY_EXCHANGE_RATE, // 5032
	GeofenceUpdateProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REQUEST_GEOFENCE_UPDATES, // 5033
	LocationPingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_UPDATE_PLAYER_LOCATION, // 5034
	GenerateGmapSignedUrlProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GENERATE_GMAP_SIGNED_URL, // 5035
	GetGmapSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_GMAP_SETTINGS, // 5036
	RedeemSamsungReceiptProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REDEEM_SAMSUNG_RECEIPT, // 5037
	SubmitPoiImageProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_SUBMIT_POI_IMAGE, // 5041
	SubmitPoiTextMetadataUpdateProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_SUBMIT_POI_TEXT_METADATA_UPDATE, // 5042
	SubmitPoiLocationUpdateProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_SUBMIT_POI_LOCATION_UPDATE, // 5043
	SubmitPoiTakedownRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_SUBMIT_POI_TAKEDOWN_REQUEST, // 5044
	GetWebTokenProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_WEB_TOKEN_ACTION, // 5045
	GetAdventureSyncSettingsRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_ADVENTURE_SYNC_SETTINGS, // 5046
	UpdateAdventureSyncSettingsRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_UPDATE_ADVENTURE_SYNC_SETTINGS, // 5047
	UpdateAdventureSyncSettingsRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_SET_BIRTHDAY, // 5048
	SearchPlayerProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SEARCH_PLAYER, // 10000
	SendFriendInviteProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SEND_FRIEND_INVITE, // 10002
	CancelFriendInviteProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_CANCEL_FRIEND_INVITE, // 10003
	AcceptFriendInviteProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_ACCEPT_FRIEND_INVITE, // 10004
	DeclineFriendInviteProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_DECLINE_FRIEND_INVITE, // 10005
	ListFriendsRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_LIST_FRIENDS, // 10006
	GetOutgoingFriendInvitesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_LIST_OUTGOING_FRIEND_INVITES, // 10007
	GetIncomingFriendInvitesProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_LIST_INCOMING_FRIEND_INVITES, // 10008
	RemoveFriendProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_REMOVE_FRIEND, // 10009
	GetFriendDetailsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_LIST_FRIEND_STATUS, // 10010
	InviteFacebookFriendProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SEND_FACEBOOK_FRIEND_INVITE, // 10011
	IsMyFriendProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_IS_MY_FRIEND, // 10012
	GetFriendCodeProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_CREATE_INVITE_CODE, // 10013
	GetFacebookFriendListProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_FACEBOOK_FRIEND_LIST, // 10014
	UpdateFacebookStatusProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_UPDATE_FACEBOOK_STATUS, // 10015
	SaveSocialPlayerSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SAVE_PLAYER_SETTINGS, // 10016
	GetPlayerSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_PLAYER_SETTINGS, // 10017
	SetAccountSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SET_ACCOUNT_SETTINGS, // 10021
	GetAccountSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_ACCOUNT_SETTINGS, // 10022
	PushNotificationRegistryProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_REGISTER_PUSH_NOTIFICATION, // 10101
	UpdateNotificationProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_UPDATE_NOTIFICATION, // 10103
	GetInboxV2Proto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_INBOX, // 10105
	UpdateProfileRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_UPDATE_PROFILE_V2, // 20001
	UpdateFriendshipRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_UPDATE_FRIENDSHIP_V2, // 20002
	GetProfileRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_PROFILE_V2, // 20003
	InviteGameRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_INVITE_GAME_V2, // 20004
	ListFriendsRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_LIST_FRIENDS_V2, // 20006
	GetFriendDetailsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_FRIEND_DETAILS_V2, // 20007
	GetClientFeatureFlagsRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_CLIENT_FEATURE_FLAGS_V2, // 20008
	GetIncomingGameInvitesRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_INCOMING_GAME_INVITES_V2, // 20010
	UpdateIncomingGameInviteRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_UPDATE_INCOMING_GAME_INVITE_V2, // 20011
	DismissOutgoingGameInvitesRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_DISMISS_OUTGOING_GAME_INVITES_V2, // 20012
	SyncContactListRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SYNC_CONTACT_LIST_V2, // 20013
	SendContactListFriendInviteRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SEND_CONTACT_LIST_FRIEND_INVITE_V2, // 20014
	ReferContactListFriendRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_REFER_CONTACT_LIST_FRIEND_V2, // 20015
	GetContactListInfoRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_CONTACT_LIST_INFO_V2, // 20016
	DismissContactListUpdateRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_DISMISS_CONTACT_LIST_UPDATE_V2, // 20017
	NotifyContactListFriendsRequest: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_NOTIFY_CONTACT_LIST_FRIENDS_V2, // 20018
	GeofenceUpdateProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_REQUEST_GEOFENCE_UPDATES_1, // 360000
	LocationPingProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_UPDATE_PLAYER_LOCATION_1, // 360001
	UpdateBreadcrumbHistoryRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_UPDATE_BREADCRUMB_HISTORY, // 361000
	SubmitNewPoiProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_ADD_NEW_POI, // 620000
	GetAvailableSubmissionsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_AVAILABLE_SUBMISSIONS, // 620001
	GetPlayerSubmissionValidationSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_PLAYER_SUBMISSION_VALIDATION_SETTINGS, // 620003
	SubmitPoiImageProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_IMAGE, // 620100
	SubmitPoiTextMetadataUpdateProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_TEXT_METADATA_UPDATE, // 620101
	SubmitPoiLocationUpdateProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_LOCATION_UPDATE, // 620102
	SubmitPoiTakedownRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_TAKEDOWN_REQUEST, // 620103
	SubmitSponsorPoiReportProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_SPONSOR_POI_REPORT, // 620104
	SubmitSponsorPoiLocationUpdateProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_SPONSOR_POI_LOCATION_UPDATE, // 620105
	SubmitPoiCategoryVoteRecordProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_CATEGORY_VOTE, // 620106
	GenerateGmapSignedUrlProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GENERATE_GMAP_SIGNED_URL, // 620300
	GetGmapSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_GMAP_SETTINGS, // 620301
	PoiVideoSubmissionMetadataProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_POI_AR_VIDEO_METADATA, // 620400
	AsyncFileUploadCompleteProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_ASYNC_FILE_UPLOAD_COMPLETE, // 620402
	GetARMappingSettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_AR_MAPPING_SETTINGS, // 620403
	GetImagesForPoiProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_IMAGES_FOR_POI, // 620500
	SubmitPlayerImageVoteForPoiProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_PLAYER_IMAGE_VOTE_FOR_POI, // 620501
	GetImageGallerySettingsProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_IMAGE_GALLERY_SETTINGS, // 620502
	GetPoisInRadiusProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_POIS_IN_RADIUS, // 620601
	GetFitnessReportProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_GET_FITNESS_REPORT_1, // 640001
	GetAdventureSyncSettingsRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_GET_ADVENTURE_SYNC_SETTINGS_1, // 640002
	UpdateAdventureSyncSettingsRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_UPDATE_ADVENTURE_SYNC_SETTINGS_1, // 640003
	UpdateAdventureSyncFitnessRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_UPDATE_ADVENTURE_SYNC_FITNESS, // 640004
	GetAdventureSyncFitnessReportRequestProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_GET_ADVENTURE_SYNC_FITNESS_REPORT, // 640005
}

const RequestResponses = {
    UnSet: 0,
	GetPlayerOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PLAYER, // 2
	GetHoloholoInventoryOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_HOLOHOLO_INVENTORY, // 4
	DownloadSettingsResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DOWNLOAD_SETTINGS, // 5
	GetGameMasterClientTemplatesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DOWNLOAD_ITEM_TEMPLATES, // 6
	GetRemoteConfigVersionsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DOWNLOAD_REMOTE_CONFIG_VERSION, // 7
	RegisterBackgroundDeviceResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_REGISTER_BACKGROUND_DEVICE, // 8
	GetPlayerDayOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PLAYER_DAY, // 9
	AcknowledgePunishmentOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ACKNOWLEDGE_PUNISHMENT, // 10
	GetServerTimeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_SERVER_TIME, // 11
	GetLocalTimeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_LOCAL_TIME, // 12
	FortSearchOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FORT_SEARCH, // 101
	EncounterOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ENCOUNTER, // 102
	CatchPokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CATCH_POKEMON, // 103
	FortDetailsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FORT_DETAILS, // 104
	GetMapObjectsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MAP_OBJECTS, // 106
	FortDeployOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FORT_DEPLOY_POKEMON, // 110
	FortRecallOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FORT_RECALL_POKEMON, // 111
	ReleasePokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_RELEASE_POKEMON, // 112
	UseItemPotionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_POTION, // 113
	UseItemCaptureOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_CAPTURE, // 114
	UseItemReviveOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_REVIVE, // 116
	PlayerProfileOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PLAYER_PROFILE, // 121
	EvolvePokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_EVOLVE_POKEMON, // 125
	GetHatchedEggsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_HATCHED_EGGS, // 126
	EncounterTutorialCompleteOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ENCOUNTER_TUTORIAL_COMPLETE, // 127
	LevelUpRewardsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LEVEL_UP_REWARDS, // 128
	CheckAwardedBadgesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHECK_AWARDED_BADGES, // 129
	RecycleItemOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_RECYCLE_INVENTORY_ITEM, // 137
	CollectDailyBonusOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COLLECT_DAILY_BONUS, // 138
	UseItemXpBoostOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_XP_BOOST, // 139
	UseItemEggIncubatorOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_EGG_INCUBATOR, // 140
	UseIncenseActionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_INCENSE, // 141
	GetIncensePokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_INCENSE_POKEMON, // 142
	IncenseEncounterOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_INCENSE_ENCOUNTER, // 143
	AddFortModifierOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ADD_FORT_MODIFIER, // 144
	DiskEncounterOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DISK_ENCOUNTER, // 145
	UpgradePokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPGRADE_POKEMON, // 147
	SetFavoritePokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_FAVORITE_POKEMON, // 148
	NicknamePokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_NICKNAME_POKEMON, // 149
	EquipBadgeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_EQUIP_BADGE, // 150
	SetContactSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_CONTACT_SETTINGS, // 151
	SetBuddyPokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_BUDDY_POKEMON, // 152
	GetBuddyWalkedOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_BUDDY_WALKED, // 153
	UseItemEncounterOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_ENCOUNTER, // 154
	GymDeployOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GYM_DEPLOY, // 155
	GymGetInfoOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GYM_GET_INFO, // 156
	GymStartSessionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GYM_START_SESSION, // 157
	GymBattleAttackOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GYM_BATTLE_ATTACK, // 158
	JoinLobbyOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_JOIN_LOBBY, // 159
	LeaveLobbyOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LEAVE_LOBBY, // 160
	SetLobbyVisibilityOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_LOBBY_VISIBILITY, // 161
	SetLobbyPokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_LOBBY_POKEMON, // 162
	GetRaidDetailsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_RAID_DETAILS, // 163
	GymFeedPokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GYM_FEED_POKEMON, // 164
	StartRaidBattleOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_START_RAID_BATTLE, // 165
	AttackRaidBattleOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ATTACK_RAID, // 166
	UseItemStardustBoostOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_STARDUST_BOOST, // 168
	ReassignPlayerOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_REASSIGN_PLAYER, // 169
	ConvertCandyToXlCandyOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CONVERT_CANDY_TO_XL_CANDY, // 171
	IsSkuAvailableOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_IS_SKU_AVAILABLE, // 172
	AssetDigestOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_ASSET_DIGEST, // 300
	DownloadUrlOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_DOWNLOAD_URLS, // 301
	AssetVersionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_ASSET_VERSION, // 302
	SetAvatarOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_AVATAR, // 404
	SetPlayerTeamOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_PLAYER_TEAM, // 405
	MarkTutorialCompleteOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_MARK_TUTORIAL_COMPLETE, // 406
	CheckChallengeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHECK_CHALLENGE, // 600
	VerifyChallengeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_VERIFY_CHALLENGE, // 601
	EchoOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ECHO, // 666
	RegisterSfidaResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_REGISTRATION, // 800
	SfidaCertificationResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_CERTIFICATION, // 802
	SfidaUpdateResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_UPDATE, // 803
	SfidaDowserResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_DOWSER, // 805
	SfidaCaptureResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_CAPTURE, // 806
	ListAvatarCustomizationsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LIST_AVATAR_CUSTOMIZATIONS, // 807
	SetAvatarItemAsViewedOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_AVATAR_ITEM_AS_VIEWED, // 808
	GetInboxOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_INBOX, // 809
	ListGymBadgesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LIST_GYM_BADGES, // 811
	GetGymBadgeDetailsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_GYM_BADGE_DETAILS, // 812
	UseItemMoveRerollOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_MOVE_REROLL, // 813
	UseItemRareCandyOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_USE_ITEM_RARE_CANDY, // 814
	AwardFreeRaidTicketOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_AWARD_FREE_RAID_TICKET, // 815
	FetchAllNewsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FETCH_ALL_NEWS, // 816
	MarkReadNewsArticleOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_MARK_READ_NEWS_ARTICLE, // 817
	GetPlayerSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PLAYER_DISPLAY_INFO, // 818
	BelugaTransactionStartOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_BELUGA_TRANSACTION_START, // 819
	BelugaTransactionCompleteOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_BELUGA_TRANSACTION_COMPLETE, // 820
	SfidaAssociateResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_ASSOCIATE, // 822
	SfidaCheckPairingResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_CHECK_PAIRING, // 823
	SfidaDisassociateResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SFIDA_DISASSOCIATE, // 824
	WainaSubmitSleepDataResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_WAINA_SUBMIT_SLEEP_DATA, // 826
	GetNewQuestsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_NEW_QUESTS, // 900
	GetQuestDetailsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_QUEST_DETAILS, // 901
	RemoveQuestOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_REMOVE_QUEST, // 903
	QuestEncounterOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_QUEST_ENCOUNTER, // 904
	ProgressQuestOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PROGRESS_QUEST, // 906
	SendGiftOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SEND_GIFT, // 950
	OpenGiftOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_GIFT, // 951
	DeleteGiftOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DELETE_GIFT, // 953
	SavePlayerSnapshotOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SAVE_PLAYER_SNAPSHOT, // 954
	CheckSendGiftOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHECK_SEND_GIFT, // 956
	SetFriendNicknameOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_FRIEND_NICKNAME, // 957
	DeleteGiftFromInventoryOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DELETE_GIFT_FROM_INVENTORY, // 958
	SaveSocialPlayerSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SAVE_SOCIAL_PLAYER_SETTINGS, // 959
	ShareExRaidPassOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SHARE_EX_RAID_PASS, // 960
	CheckShareExRaidPassOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHECK_SHARE_EX_RAID_PASS, // 961
	DeclineExRaidPassOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DECLINE_SHARED_EX_RAID_PASS, // 962
	OpenTradingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_TRADING, // 970
	UpdateTradingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPDATE_TRADING, // 971
	ConfirmTradingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CONFIRM_TRADING, // 972
	CancelTradingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CANCEL_TRADING, // 973
	GetTradingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_TRADING, // 974
	GetFitnessRewardsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_FITNESS_REWARDS, // 980
	GetCombatPlayerProfileOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_COMBAT_PLAYER_PROFILE, // 990
	GenerateCombatChallengeIdOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GENERATE_COMBAT_CHALLENGE_ID, // 991
	CreateCombatChallengeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CREATE_COMBAT_CHALLENGE, // 992
	OpenCombatChallengeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_COMBAT_CHALLENGE, // 993
	GetCombatChallengeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_COMBAT_CHALLENGE, // 994
	AcceptCombatChallengeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ACCEPT_COMBAT_CHALLENGE, // 995
	DeclineCombatChallengeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DECLINE_COMBAT_CHALLENGE, // 996
	CancelCombatChallengeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CANCEL_COMBAT_CHALLENGE, // 997
	SubmitCombatChallengePokemonsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SUBMIT_COMBAT_CHALLENGE_POKEMONS, // 998
	SaveCombatPlayerPreferencesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SAVE_COMBAT_PLAYER_PREFERENCES, // 999
	OpenCombatSessionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_COMBAT_SESSION, // 1000
	UpdateCombatOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPDATE_COMBAT, // 1001
	QuitCombatOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_QUIT_COMBAT, // 1002
	GetCombatResultsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_COMBAT_RESULTS, // 1003
	UnlockPokemonMoveOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UNLOCK_SPECIAL_MOVE, // 1004
	GetNpcCombatRewardsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_NPC_COMBAT_REWARDS, // 1005
	CombatFriendRequestOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMBAT_FRIEND_REQUEST, // 1006
	OpenNpcCombatSessionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_NPC_COMBAT_SESSION, // 1007
	StartTutorialOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_START_TUTORIAL_ACTION, // 1008
	GetTutorialEggOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_TUTORIAL_EGG_ACTION, // 1009
	SendProbeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SEND_PROBE, // 1020
	CheckPhotobombOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHECK_PHOTOBOMB, // 1101
	ConfirmPhotobombOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CONFIRM_PHOTOBOMB, // 1102
	GetPhotobombOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PHOTOBOMB, // 1103
	EncounterPhotobombOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ENCOUNTER_PHOTOBOMB, // 1104
	GetGmapSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_SIGNED_GMAP_URL_DEPRECATED, // 1105
	ChangeTeamOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHANGE_TEAM, // 1106
	GetWebTokenOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_WEB_TOKEN, // 1107
	CompleteSnapshotSessionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMPLETE_SNAPSHOT_SESSION, // 1110
	CompleteWildSnapshotSessionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMPLETE_WILD_SNAPSHOT_SESSION, // 1111
	StartIncidentOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_START_INCIDENT, // 1200
	CompleteInvasionDialogueOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_INVASION_COMPLETE_DIALOGUE, // 1201
	OpenInvasionCombatSessionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_INVASION_OPEN_COMBAT_SESSION, // 1202
	UpdateInvasionBattleOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_INVASION_BATTLE_UPDATE, // 1203
	InvasionEncounterOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_INVASION_ENCOUNTER, // 1204
	PurifyPokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PURIFY_POKEMON, // 1205
	GetRocketBalloonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_ROCKET_BALLOON, // 1206
	VsSeekerStartMatchmakingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_VS_SEEKER_START_MATCHMAKING, // 1300
	CancelMatchmakingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CANCEL_MATCHMAKING, // 1301
	GetMatchmakingStatusOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MATCHMAKING_STATUS, // 1302
	CompleteVsSeekerAndRestartChargingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMPLETE_VS_SEEKER_AND_RESTART_CHARGING, // 1303
	GetVsSeekerStatusOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_VS_SEEKER_STATUS, // 1304
	CompleteCompetitiveSeasonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMPLETE_COMBAT_COMPETITIVE_SEASON_ACTION, // 1305
	ClaimVsSeekerRewardsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CLAIM_VS_SEEKER_REWARDS, // 1306
	VsSeekerRewardEncounterOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_VS_SEEKER_REWARD_ENCOUNTER, // 1307
	ActivateVsSeekerOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ACTIVATE_VS_SEEKER, // 1308
	BuddyMapOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_BUDDY_MAP, // 1350
	BuddyStatsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_BUDDY_STATS, // 1351
	BuddyFeedingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_FEED_BUDDY, // 1352
	OpenBuddyGiftOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_BUDDY_GIFT, // 1353
	BuddyPettingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PET_BUDDY, // 1354
	GetBuddyHistoryOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_BUDDY_HISTORY, // 1355
	UpdateRouteDraftOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPDATE_ROUTE_DRAFT, // 1400
	GetMapFortsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MAP_FORTS, // 1401
	SubmitRouteDraftOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SUBMIT_ROUTE_DRAFT, // 1402
	GetPublishedRoutesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_PUBLISHED_ROUTES, // 1403
	StartRouteOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_START_ROUTE, // 1404
	GetRoutesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_ROUTES, // 1405
	ProgressRouteOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PROGRESS_ROUTE, // 1406
	ProcessRouteWaypointInteractionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PROCESS_ROUTE_WAYPOINT_INTERACTION, // 1407
	ProcessRouteTappableOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PROCESS_ROUTE_TAPPABLE, // 1408
	ListRouteBadgesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LIST_ROUTE_BADGES, // 1409
	CancelRouteOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CANCEL_ROUTE, // 1410
	CreateBuddyMultiplayerSessionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CREATE_BUDDY_MUTLIPLAYER_SESSION, // 1456
	JoinBuddyMultiplayerSessionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_JOIN_BUDDY_MULTIPLAYER_SESSION, // 1457
	LeaveBuddyMultiplayerSessionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_LEAVE_BUDDY_MULTIPLAYER_SESSION, // 1458
	GetTodayViewOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_TODAY_VIEW, // 1501
	MegaEvolvePokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_MEGA_EVOLVE_POKEMON, // 1502
	RemoteGiftPingResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_REMOTE_GIFT_PING, // 1503
	SendRaidInvitationOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SEND_RAID_INVITATION, // 1504
	GetDailyEncounterOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_DAILY_ENCOUNTER, // 1601
	DailyEncounterOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DAILY_ENCOUNTER, // 1602
	OpenSponsoredGiftOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_OPEN_SPONSORED_GIFT, // 1650
	SavePlayerPreferencesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SAVE_PLAYER_PREFERENCES, // 1652
	ProfanityCheckOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_PROFANITY_CHECK, // 1653
	GetTimedGroupChallengeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_TIMED_GROUP_CHALLENGE, // 1700
	GetNintendoAccountOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_NINTENDO_ACCOUNT, // 1710
	UnlinkNintendoAccountOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UNLINK_NINTENDO_ACCOUNT, // 1711
	GetNintendoOAuth2UrlOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_NINTENDO_OAUTH2_URL, // 1712
	TransferPokemonToPokemonHomeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_TRANSFER_TO_POKEMON_HOME, // 1713
	ReportAdFeedbackResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_REPORT_AD_FEEDBACK, // 1716
	CreatePokemonTagOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CREATE_POKEMON_TAG, // 1717
	DeletePokemonTagOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DELETE_POKEMON_TAG, // 1718
	EditPokemonTagOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_EDIT_POKEMON_TAG, // 1719
	SetPokemonTagsForPokemonOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SET_POKEMON_TAGS_FOR_POKEMON, // 1720
	GetPokemonTagsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_POKEMON_TAGS, // 1721
	ChangePokemonFormOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHANGE_POKEMON_FORM, // 1722
	ChooseGlobalTicketedEventVariantOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CHOOSE_EVENT_VARIANT, // 1723
	GetReferralCodeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_REFERRAL_CODE, // 1800
	AddReferrerOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_ADD_REFERRER, // 1801
	SendFriendInviteViaReferralCodeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_SEND_FRIEND_INVITE_VIA_REFERRAL_CODE, // 1802
	GetMilestonesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MILESTONES, // 1803
	MarkMilestoneAsViewedOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_MARK_MILESTONES_AS_VIEWED, // 1804
	GetMilestonesPreviewOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MILESTONES_PREVIEW, // 1805
	CompleteMilestoneOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_COMPLETE_MILESTONE, // 1806
	GetGeofencedAdOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_GEOFENCED_AD, // 1820
	CreatePostcardOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_CREATE_POSTCARD, // 1910
	UpdatePostcardOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPDATE_POSTCARD, // 1911
	DeletePostcardOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_DELETE_POSTCARD, // 1912
	GetMementoListOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_GET_MEMENTO_LIST, // 1913
	UploadRaidClientLogOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_METHOD_UPLOAD_RAID_CLIENT_LOG, // 1914
	PushNotificationRegistryOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REGISTER_PUSH_NOTIFICATION, // 5000
	UpdateNotificationOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_UPDATE_NOTIFICATION_STATUS, // 5002
	OptOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_OPT_OUT_PUSH_NOTIFICATION_CATEGORY, // 5003
	DownloadGmTemplatesResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_DOWNLOAD_GAME_MASTER_TEMPLATES, // 5004
	GetInventoryResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_INVENTORY, // 5005
	RedeemPasscodeResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REDEEM_PASSCODE, // 5006
	PingResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_PING, // 5007
	AddLoginActionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_ADD_LOGIN_ACTION, // 5008
	RemoveLoginActionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REMOVE_LOGIN_ACTION, // 5009
	ListLoginActionOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_LIST_LOGIN_ACTION, // 5010
	SubmitNewPoiOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_ADD_NEW_POI, // 5011
	ProxyResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_PROXY_SOCIAL_ACTION, // 5012
	GetAvailableSubmissionsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_AVAILABLE_SUBMISSIONS, // 5014
	PurchaseSkuOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_PURCHASE_SKU, // 5019
	GetAvailableSkusAndBalancesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_AVAILABLE_SKUS_AND_BALANCES, // 5020
	RedeemGoogleReceiptOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REDEEM_GOOGLE_RECEIPT, // 5021
	RedeemAppleReceiptOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REDEEM_APPLE_RECEIPT, // 5022
	GetFitnessReportOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_FITNESS_REPORT, // 5025
	SetInGameCurrencyExchangeRateOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_SET_IN_GAME_CURRENCY_EXCHANGE_RATE, // 5032
	GeofenceUpdateOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REQUEST_GEOFENCE_UPDATES, // 5033
	LocationPingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_UPDATE_PLAYER_LOCATION, // 5034
	GenerateGmapSignedUrlOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GENERATE_GMAP_SIGNED_URL, // 5035
	GetGmapSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_GMAP_SETTINGS, // 5036
	RedeemSamsungReceiptOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_REDEEM_SAMSUNG_RECEIPT, // 5037
	GetWebTokenOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_WEB_TOKEN_ACTION, // 5045
	GetAdventureSyncSettingsResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_GET_ADVENTURE_SYNC_SETTINGS, // 5046
	UpdateAdventureSyncSettingsResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_UPDATE_ADVENTURE_SYNC_SETTINGS, // 5047
	UpdateAdventureSyncSettingsResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_CLIENT_ACTION_SET_BIRTHDAY, // 5048
	SearchPlayerOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SEARCH_PLAYER, // 10000
	SendFriendInviteOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SEND_FRIEND_INVITE, // 10002
	CancelFriendInviteOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_CANCEL_FRIEND_INVITE, // 10003
	AcceptFriendInviteOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_ACCEPT_FRIEND_INVITE, // 10004
	DeclineFriendInviteOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_DECLINE_FRIEND_INVITE, // 10005
	ListFriendsResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_LIST_FRIENDS, // 10006
	GetOutgoingFriendInvitesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_LIST_OUTGOING_FRIEND_INVITES, // 10007
	GetIncomingFriendInvitesOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_LIST_INCOMING_FRIEND_INVITES, // 10008
	RemoveFriendOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_REMOVE_FRIEND, // 10009
	GetFriendDetailsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_LIST_FRIEND_STATUS, // 10010
	InviteFacebookFriendOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SEND_FACEBOOK_FRIEND_INVITE, // 10011
	IsMyFriendOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_IS_MY_FRIEND, // 10012
	GetFriendCodeOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_CREATE_INVITE_CODE, // 10013
	GetFacebookFriendListOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_FACEBOOK_FRIEND_LIST, // 10014
	UpdateFacebookStatusOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_UPDATE_FACEBOOK_STATUS, // 10015
	SaveSocialPlayerSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SAVE_PLAYER_SETTINGS, // 10016
	GetPlayerSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_PLAYER_SETTINGS, // 10017
	SetAccountSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SET_ACCOUNT_SETTINGS, // 10021
	GetAccountSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_ACCOUNT_SETTINGS, // 10022
	PushNotificationRegistryOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_REGISTER_PUSH_NOTIFICATION, // 10101
	UpdateNotificationOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_UPDATE_NOTIFICATION, // 10103
	OptOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_OPT_OUT_PUSH_NOTIFICATION_CATEGORY, // 10104
	GetInboxOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_INBOX, // 10105
	UpdateProfileResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_UPDATE_PROFILE_V2, // 20001
	UpdateFriendshipResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_UPDATE_FRIENDSHIP_V2, // 20002
	GetProfileResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_PROFILE_V2, // 20003
	InviteGameResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_INVITE_GAME_V2, // 20004
	ListFriendsResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_LIST_FRIENDS_V2, // 20006
	GetFriendDetailsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_FRIEND_DETAILS_V2, // 20007
	GetClientFeatureFlagsResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_CLIENT_FEATURE_FLAGS_V2, // 20008
	GetIncomingGameInvitesResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_INCOMING_GAME_INVITES_V2, // 20010
	UpdateIncomingGameInviteResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_UPDATE_INCOMING_GAME_INVITE_V2, // 20011
	DismissOutgoingGameInvitesResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_DISMISS_OUTGOING_GAME_INVITES_V2, // 20012
	SyncContactListResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SYNC_CONTACT_LIST_V2, // 20013
	SendContactListFriendInviteResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_SEND_CONTACT_LIST_FRIEND_INVITE_V2, // 20014
	ReferContactListFriendResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_REFER_CONTACT_LIST_FRIEND_V2, // 20015
	GetContactListInfoResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_GET_CONTACT_LIST_INFO_V2, // 20016
	DismissContactListUpdateResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_DISMISS_CONTACT_LIST_UPDATE_V2, // 20017
	NotifyContactListFriendsResponse: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_SOCIAL_ACTION_NOTIFY_CONTACT_LIST_FRIENDS_V2, // 20018
	GeofenceUpdateOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_REQUEST_GEOFENCE_UPDATES_1, // 360000
	LocationPingOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_UPDATE_PLAYER_LOCATION_1, // 360001
	UpdateBreadcrumbHistoryResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_UPDATE_BREADCRUMB_HISTORY, // 361000
	SubmitNewPoiOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_ADD_NEW_POI, // 620000
	GetAvailableSubmissionsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_AVAILABLE_SUBMISSIONS, // 620001
	GetPlayerSubmissionValidationSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_PLAYER_SUBMISSION_VALIDATION_SETTINGS, // 620003
	GenerateGmapSignedUrlOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GENERATE_GMAP_SIGNED_URL, // 620300
	GetGmapSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_GMAP_SETTINGS, // 620301
	AsyncFileUploadCompleteOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_ASYNC_FILE_UPLOAD_COMPLETE, // 620402
	GetARMappingSettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_AR_MAPPING_SETTINGS, // 620403
	GetImagesForPoiOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_IMAGES_FOR_POI, // 620500
	SubmitPlayerImageVoteForPoiOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_SUBMIT_PLAYER_IMAGE_VOTE_FOR_POI, // 620501
	GetImageGallerySettingsOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_IMAGE_GALLERY_SETTINGS, // 620502
	GetPoisInRadiusOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_PLAYER_SUBMISSION_ACTION_GET_POIS_IN_RADIUS, // 620601
	GetFitnessReportOutProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_GET_FITNESS_REPORT_1, // 640001
	GetAdventureSyncSettingsResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_GET_ADVENTURE_SYNC_SETTINGS_1, // 640002
	UpdateAdventureSyncSettingsResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_UPDATE_ADVENTURE_SYNC_SETTINGS_1, // 640003
	UpdateAdventureSyncFitnessResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_UPDATE_ADVENTURE_SYNC_FITNESS, // 640004
	GetAdventureSyncFitnessReportResponseProto: parseInt(POGOProtos.Rpc.AllTypesAndMessagesResponsesProto.AllResquestTypesProto.REQUEST_TYPE_GET_ADVENTURE_SYNC_FITNESS_REPORT // 640005
};
*/

const RpcMethod = {
    UnSet: 0, // 0
    GetPlayerOutProto: parseInt(POGOProtos.Rpc.Method.METHOD_GET_PLAYER), // 2
    UnUsed_GetHoloholoInventoryOutProto: parseInt(POGOProtos.Rpc.Method.METHOD_GET_HOLOHOLO_INVENTORY), // 4
    DownloadSettingsResponseProto: parseInt(POGOProtos.Rpc.Method.METHOD_DOWNLOAD_SETTINGS), // 5
    GetGameMasterClientTemplatesOutProto: parseInt(POGOProtos.Rpc.Method.METHOD_DOWNLOAD_ITEM_TEMPLATES), // 6
    GetRemoteConfigVersionsOutProto: parseInt(POGOProtos.Rpc.Method.METHOD_DOWNLOAD_REMOTE_CONFIG_VERSION), // 7
    FortSearchOutProto: parseInt(POGOProtos.Rpc.Method.METHOD_FORT_SEARCH), // 101
    EncounterOutProto: parseInt(POGOProtos.Rpc.Method.METHOD_ENCOUNTER), // 102
    FortDetailsOutProto: parseInt(POGOProtos.Rpc.Method.METHOD_FORT_DETAILS), // 104
    GetMapObjectsOutProto: parseInt(POGOProtos.Rpc.Method.METHOD_GET_MAP_OBJECTS), // 106
    GymGetInfoOutProto: parseInt(POGOProtos.Rpc.Method.METHOD_GYM_GET_INFO), // 156
    AssetDigestOutProto: parseInt(POGOProtos.Rpc.Method.METHOD_GET_ASSET_DIGEST), // 300
    DownloadGmTemplatesResponseProto: parseInt(POGOProtos.Rpc.ClientAction.CLIENT_ACTION_DOWNLOAD_GAME_MASTER_TEMPLATES), // 5004
    GetHoloholoInventoryOutProto: parseInt(POGOProtos.Rpc.ClientAction.CLIENT_ACTION_GET_INVENTORY), // 5005
};

/**
 * RouteController class
 */
class RouteController {

    /**
     * Initialize new RouteController object.
     */
    constructor() {
        this.emptyCells = [];
        this.levelCache = {};
        this.consumers = {};
    }

    /**
     * Handle incoming /raw data
     * @param {*} req
     * @param {*} res
     */
    async handleRawData(req, res) {
        let json = req.body;
        if (!json) {
            console.error('[Raw] Bad data');
            return res.sendStatus(400);
        }

        let contents;
        let trainerLevel = 0;
        let username;
        let uuid;
        let latTarget;
        let lonTarget;

        // handle Android/PogoDroid data
        if (Array.isArray(json)) {
            if (json.length === 0) {
                return;
            }

            trainerLevel = 30;
            uuid = `PogoDroid ${req.headers['origin']}`;
            username = `PogoDroid ${req.headers['origin']}`;
            latTarget = json[0]['lat'];
            lonTarget = json[0]['lng'];

            contents = [];
            for (let message of json) {
                if (message['raw'] === false) {
                    console.warn(`Ignoring non-raw message from ${username}`);
                    continue;
                }

                // PD is sending more then we actually need.
                // let's only care about certain protos
                //if (![2, 5, 6, 101, 102, 104, 106, 156, 300, 5004, 5005].includes(parseInt(message['type']))) {
                //    continue;
                //}

                if (!Object.values(RpcMethod).includes(parseInt(message['type']))) {
                    continue;
                }

                contents.push({
                    'data': message['payload'],
                    'method': parseInt(message['type'])
                });
            }
            // handle iOS data
        } else {
            if (json['payload']) {
                json['contents'] = [json];
            }

            contents = json['contents'] || json['protos'] || json['gmo'];
            trainerLevel = parseInt(json['trainerlvl'] || json['trainerLevel']) || 0;
            username = json['username'];
            uuid = json['uuid'];
            latTarget = json['lat_target'];
            lonTarget = json['lon_target'];

            if (uuid && latTarget && lonTarget) {
                if (config.dataparser.addDevicesThroughParser) {
                    console.debug("Need to add Devices through Data");
                    try {
                        console.debug("Getting Account with username ", username);
                        let account = await Account.getWithUsername(username);
                        if (!account || account.username==null) {
                            console.debug("No account with that username found");
                            let account = Account.create({
                                username: username,
                                password: 'temp',
                                firstWarningTimestamp: 0,
                                failedTimestamp: 0,
                                failed: null,
                                level: trainerLevel,
                            });
                            console.debug("Account created");
                        }
                        console.debug("Getting Device that is linked with the given username");
                        let deviceByUsername = await Device.getByAccountUsername(username);
                        if (!deviceByUsername) {
                            console.debug("No Device found yet for the given username");
                        } else {
                            if (deviceByUsername.uuid != uuid) {
                                console.debug("Account is logged in on another device, clear accountname for this device");
                                await Device.setAccountUsername(deviceByUsername.uuid, '');
                            }
                        }

                        console.debug("Getting Device based on uuid", uuid);
                        let device = await Device.getById(uuid);
                        if (!device) {
                            console.debug("No Device found for the given uuid, getting AutoAddedByParser instance");
                            let instance = await Instance.getByName('AutoAddedByParser');
                            if (!instance || instance.name==null) {
                                console.debug("Instance not found");
                                const data = {
                                    area: [
                                        {
                                            "lat":-90,
                                            "lon":-180
                                        },{
                                            "lat":-90,
                                            "lon":180
                                        },{
                                            "lat":90,
                                            "lon":180
                                        },{
                                            "lat":90,
                                            "lon":-180
                                        }
                                    ],
                                    timezone_offset: 7200,
                                    min_level: 1,
                                    max_level: 40,
                                };
                                let instance = Instance.create({
                                    name: 'AutoAddedByParser',
                                    type: InstanceType.CirclePokemon,
                                    data: data,
                                });
                                console.debug("Instance created");
                            }

                            console.debug("Creating device");
                            let device = Device.create({
                                uuid: uuid,
                                instanceName: instance.name,
                                accountUsername: username,
                                lastHost: null,
                                lastSeen: Math.floor(Date.now() / 1000),
                                lastLat: latTarget,
                                lastLon: lonTarget,
                            });
                            console.debug("Device created");
                        }
                        console.debug("Checking if the device username is the current account username");
                        if (device && device.accountUsername != account.username) {
                            console.debug("Different account logged in, changing account");
                            await Device.setAccountUsername(uuid, account.username);
                            console.debug("Account username updated");
                        }
                    } catch (err) {
                        console.error('[Raw] Error:', err);
                    }
                }

                try {
                    await Device.setLastLocation(uuid, latTarget, lonTarget);
                } catch (err) {
                    console.error('[Raw] Error:', err);
                }
            }
        }

        return this.handleData(res, contents, trainerLevel, username, uuid);
    }

    /**
     * Handle data
     * @param {*} res
     * @param {*} contents
     * @param {*} trainerLevel
     * @param {*} username
     * @param {*} uuid
     * @param {*} lastTarget
     * @param {*} lonTarget
     */
    async handleData(res, contents, trainerLevel, username, uuid) {
        if (username && trainerLevel > 0) {
            let oldLevel = this.levelCache[username];
            if (oldLevel !== trainerLevel) {
                await Account.setLevel(username, trainerLevel);
                this.levelCache[username] = trainerLevel;
            }
        }
        if (!contents) {
            console.error('[Raw] Invalid PROTO');
            return res.sendStatus(400);
        }
        let wildPokemons = [];
        let nearbyPokemons = [];
        let clientWeathers = [];
        let forts = [];
        let fortDetails = [];
        let gymInfos = [];
        let quests = [];
        let fortSearch = [];
        let encounters = [];
        let cells = [];
        let playerData = [];

        //Refs Added....
        let inventoryData = [];
        let gameMasterData = [];
        let getItemTemplatesData = [];
        let assetDigestData = [];
        let settingsData = [];
        let remoteConfigData = [];
        //
        let isEmptyGMO = true;
        let isInvalidGMO = true;
        let containsGMO = false;

        for (let i = 0; i < contents.length; i++) {
            const rawData = contents[i];
            let data = {};
            let method = parseInt(POGOProtos.Rpc.Method.METHOD_UNSET);
            if (rawData['data'] && rawData['method']) {
                data = rawData['data'];
                method = parseInt(rawData['method']);
            } else {
                console.error('[Raw] Unhandled proto:', rawData);
                return res.sendStatus(400);
            }

            switch (method) {
                case RpcMethod.UnSet:
                    return res.sendStatus(400);
                case RpcMethod.GetPlayerOutProto:
                    try {
                        let gpr = POGOProtos.Rpc.GetPlayerOutProto.decode(base64_decode(data));
                        if (gpr) {
                            if (gpr.success) {
                                let data = gpr.player;
                                //console.debug('[Raw] GetPlayerData:', data);
                                playerData.push(data);
                            }
                        } else {
                            console.error('[Raw] Malformed GetPlayerOutProto');
                        }
                    } catch (err) {
                        console.error('[Raw] Unable to decode GetPlayerOutProto');
                    }
                    break;
                case RpcMethod.GetHoloholoInventoryOutProto:
                    if (config.dataparser.parse.inventory) {
                        try {
                            let ghi = POGOProtos.Rpc.GetHoloholoInventoryOutProto.decode(base64_decode(data));
                            if (ghi) {
                                if (ghi.success) {
                                    let data = ghi.inventory_delta;
                                    //TODO: Need //comment
                                    // console.debug('[Raw] GetInventoryData:', data);
                                    inventoryData.push(data);
                                }
                            } else {
                                console.error('[Raw] Malformed GetHoloholoInventoryOutProto');
                            }
                        } catch (err) {
                            console.error('[Raw] Unable to decode GetHoloholoInventoryOutProto');
                        }
                    }
                    break;
                case RpcMethod.UnUsed_GetHoloholoInventoryOutProto:
                    if (config.dataparser.parse.inventory) {
                        try {
                            let ghi = POGOProtos.Rpc.GetHoloholoInventoryOutProto.decode(base64_decode(data));
                            if (ghi) {
                                if (ghi.success) {
                                    let data = ghi.inventory_delta;
                                    //TODO: Need //comment
                                    // console.debug('[Raw] GetInventoryData:', data);
                                    inventoryData.push(data);
                                }
                            } else {
                                console.error('[Raw] Malformed UnUsed_GetHoloholoInventoryOutProto');
                            }
                        } catch (err) {
                            console.error('[Raw] Unable to decode UnUsed_GetHoloholoInventoryOutProto');
                        }
                    }
                    break;
                case RpcMethod.DownloadGmTemplatesResponseProto:
                    if (config.dataparser.parse.gamemaster) {
                        try {
                            let gm = POGOProtos.Rpc.DownloadGmTemplatesResponseProto.decode(base64_decode(data));
                            if (gm) {
                                if (gm.result === POGOProtos.Rpc.DownloadGmTemplatesResponseProto.Result.COMPLETE) {
                                    //TODO: Need //comment
                                    console.debug('[Raw] GetGameMasterData:', gm);
                                    gameMasterData.push(gm);
                                }
                            } else {
                                console.error('[Raw] Malformed DownloadGmTemplatesResponseProto');
                            }
                        } catch (err) {
                            console.error('[Raw] Unable to decode DownloadGmTemplatesResponseProto');
                        }
                    }
                    break;
                case RpcMethod.GetRemoteConfigVersionsOutProto:
                    if (config.dataparser.parse.remoteconfig) {
                        try {
                            let rc = POGOProtos.Rpc.GetRemoteConfigVersionsOutProto.decode(base64_decode(data));
                            if (rc) {
                                if (rc.result === POGOProtos.Rpc.GetRemoteConfigVersionsOutProto.SUCCESS) {
                                    //TODO: Need //comment
                                    console.debug('[Raw] GetRemoteConfigData:', rc);
                                    remoteConfigData.push(rc);
                                }
                            } else {
                                console.error('[Raw] Malformed GetRemoteConfigVersionsOutProto');
                            }
                        } catch (err) {
                            console.error('[Raw] Unable to decode GetRemoteConfigVersionsOutProto');
                        }
                    }
                    break;
                case RpcMethod.DownloadSettingsResponseProto:
                    if (config.dataparser.parse.downloadsettings) {
                        try {
                            let ds = POGOProtos.Rpc.DownloadSettingsResponseProto.decode(base64_decode(data));
                            if (ds) {
                                if (ds.result === POGOProtos.Rpc.DownloadSettingsResponseProto.Result.SUCCESS) {
                                    //TODO: Need //comment
                                    console.debug('[Raw] GetSettingsData:', ds);
                                    settingsData.push(ds);
                                }
                            } else {
                                console.error('[Raw] Malformed DownloadSettingsResponseProto');
                            }
                        } catch (err) {
                            console.error('[Raw] Unable to decode DownloadSettingsResponseProto');
                        }
                    }
                    break;
                case RpcMethod.AssetDigestOutProto:
                    if (config.dataparser.parse.assetdigest) {
                        try {
                            let ad = POGOProtos.Rpc.AssetDigestOutProto.decode(base64_decode(data));
                            if (ad) {
                                if (ad.result === POGOProtos.Rpc.AssetDigestOutProto.Result.SUCCESS) {
                                    //TODO: Need //comment
                                    console.debug('[Raw] GetAssetDigestData:', ad);
                                    assetDigestData.push(ad);
                                }
                            } else {
                                console.error('[Raw] Malformed AssetDigestOutProto');
                            }
                        } catch (err) {
                            console.error('[Raw] Unable to decode AssetDigestOutProto');
                        }
                    }
                    break;
                case RpcMethod.GetGameMasterClientTemplatesOutProto:
                    if (config.dataparser.parse.getforgamemaster) {
                        try {
                            let ggm = POGOProtos.Rpc.GetGameMasterClientTemplatesOutProto.decode(base64_decode(data));
                            if (ggm) {
                                if (ggm.result === POGOProtos.Rpc.GetGameMasterClientTemplatesOutProto.Result.SUCCESS) {
                                    //TODO: Need //comment
                                    console.debug('[Raw] GetItemTemplatesData:', ggm);
                                    getItemTemplatesData.push(ggm);
                                }
                            } else {
                                console.error('[Raw] Malformed GetGameMasterClientTemplatesOutProto');
                            }
                        } catch (err) {
                            console.error('[Raw] Unable to decode GetGameMasterClientTemplatesOutProto');
                        }
                    }
                    break;
                case RpcMethod.FortSearchOutProto:
                    try {
                        let fsr = POGOProtos.Rpc.FortSearchOutProto.decode(base64_decode(data));
                        if (fsr) {
                            if (config.dataparser.parse.quests && fsr.challenge_quest && fsr.challenge_quest.quest) {
                                let quest = fsr.challenge_quest.quest;
                                quests.push(quest);
                            }
                            fortSearch.push(fsr);
                        } else {
                            console.error('[Raw] Malformed FortSearchOutProto');
                        }
                    } catch (err) {
                        console.error('[Raw] Unable to decode FortSearchOutProto');
                    }
                    break;
                case RpcMethod.EncounterOutProto:
                    if (config.dataparser.parse.encounters && trainerLevel >= 30) {
                        try {
                            let er = POGOProtos.Rpc.EncounterOutProto.decode(base64_decode(data));
                            if (er && er.status === POGOProtos.Rpc.EncounterOutProto.Status.ENCOUNTER_SUCCESS) {
                                encounters.push(er);
                            } else if (!er) {
                                console.error('[Raw] Malformed EncounterOutProto');
                            }
                        } catch (err) {
                            console.error('[Raw] Unable to decode EncounterOutProto');
                        }
                    }
                    break;
                case RpcMethod.FortDetailsOutProto:
                    try {
                        let fdr = POGOProtos.Rpc.FortDetailsOutProto.decode(base64_decode(data));
                        if (fdr) {
                            fortDetails.push(fdr);
                        } else {
                            console.error('[Raw] Malformed FortDetailsOutProto');
                        }
                    } catch (err) {
                        console.error('[Raw] Unable to decode FortDetailsOutProto');
                    }
                    break;
                case RpcMethod.GetMapObjectsOutProto:
                    containsGMO = true;
                    try {
                        let gmo = POGOProtos.Rpc.GetMapObjectsOutProto.decode(base64_decode(data));
                        if (gmo) {
                            isInvalidGMO = false;
                            let mapCellsNew = gmo.map_cell;
                            if (mapCellsNew.length === 0) {
                                console.debug(`[Raw] [${uuid}] Map cells are empty`);
                                return res.sendStatus(400);
                            }
                            mapCellsNew.forEach(mapCell => {
                                if (config.dataparser.parse.pokemon) {
                                    let timestampMs = parseInt(BigInt(mapCell.as_of_time_ms).toString());
                                    let wildNew = mapCell.wild_pokemon;
                                    wildNew.forEach((wildPokemon) => {
                                        wildPokemons.push({
                                            cell: mapCell.s2_cell_id,
                                            data: wildPokemon,
                                            timestampMs: timestampMs
                                        });
                                    });
                                    let nearbyNew = mapCell.nearby_pokemon;
                                    nearbyNew.forEach(nearbyPokemon => {
                                        nearbyPokemons.push({
                                            cell: mapCell.s2_cell_id,
                                            data: nearbyPokemon,
                                            timestampMs: timestampMs,
                                        });
                                    });
                                }
                                let fortsNew = mapCell.fort;
                                fortsNew.forEach(fort => {
                                    forts.push({
                                        cell: mapCell.s2_cell_id,
                                        data: fort
                                    });
                                });
                                cells.push(mapCell.s2_cell_id);
                            });

                            if (config.dataparser.parse.weather) {
                                let weather = gmo.client_weather;
                                weather.forEach(wmapCell => {
                                    clientWeathers.push({
                                        cell: wmapCell.s2_cell_id,
                                        data: wmapCell
                                    });
                                });
                            }

                            if (wildPokemons.length === 0 && nearbyPokemons.length === 0 && forts.length === 0) {
                                cells.forEach(cell => {
                                    let count = this.emptyCells[cell];
                                    if (!count) {
                                        this.emptyCells[cell] = 1;
                                    } else {
                                        this.emptyCells[cell] = count + 1;
                                    }
                                    if (count === 3) {
                                        console.debug('[Raw] Cell', cell.toString(), 'was empty 3 times in a row. Assuming empty.');
                                        cells.push(cell);
                                    }
                                });

                                console.debug('[Raw] GMO is empty.');
                            } else {
                                cells.forEach(cell => delete this.emptyCells[cell]);
                                isEmptyGMO = false;
                            }
                        } else {
                            console.error('[Raw] Malformed GetMapObjectsOutProto');
                        }
                    } catch (err) {
                        console.error(`[Raw] Unable to decode GetMapObjectsOutProto ${err.message}`);
                    }
                    break;
                case RpcMethod.GymGetInfoOutProto:
                    try {
                        let ggi = POGOProtos.Rpc.GymGetInfoOutProto.decode(base64_decode(data));
                        if (ggi) {
                            gymInfos.push(ggi);
                        } else {
                            console.error('[Raw] Malformed GymGetInfoOutProto');
                        }
                    } catch (err) {
                        console.error('[Raw] Unable to decode GymGetInfoOutProto');
                    }
                    break;
                default:
                    console.error('[Raw] Invalid method or data provided:', method, data);
            }
        }

        if (!this.consumers[username]) {
            this.consumers[username] = new Consumer(username);
        }

        let total = wildPokemons.length + nearbyPokemons.length + clientWeathers.length
            + forts.length + fortDetails.length + gymInfos.length
            + quests.length + encounters.length + cells.length
            + inventoryData.length + gameMasterData.length + getItemTemplatesData.length
            + settingsData.length + assetDigestData.length + remoteConfigData.length;
        let startTime = process.hrtime();
        let jobs = [];

        if (playerData.length > 0) {
            jobs = this.consumers[username].updatePlayerData(playerData);
        }

        if (clientWeathers.length > 0) {
            jobs.push(this.consumers[username].updateWeather(clientWeathers, username));
            jobs.push(ipcWorker.reportWeather(username, clientWeathers.map(
                (conditions) => [conditions.cell.toString(), conditions.data.gameplay_weather.gameplay_condition])));
        }

        if (cells.length > 0) {
            await this.consumers[username].updateCells(cells);
        }

        if (forts.length > 0) {
            await this.consumers[username].updateForts(forts);
        }

        if (wildPokemons.length > 0) {
            jobs = jobs.concat(this.consumers[username].updateWildPokemon(wildPokemons));
        }

        if (nearbyPokemons.length > 0) {
            jobs = jobs.concat(this.consumers[username].updateNearbyPokemon(nearbyPokemons));
        }

        if (encounters.length > 0) {
            jobs = jobs.concat(this.consumers[username].updateEncounters(encounters));
        }

        if (fortDetails.length > 0) {
            jobs.push(this.consumers[username].updateFortDetails(fortDetails));
        }

        if (gymInfos.length > 0) {
            jobs.push(this.consumers[username].updateGymInfos(gymInfos));
        }

        if (quests.length > 0) {
            jobs.push(this.consumers[username].updateQuests(quests));
        }

        await Promise.all(jobs);

        let endTime = process.hrtime(startTime);
        let ms = (endTime[0] * 1000000000 + endTime[1]) / 1000000;
        if (ms >= 1000) {
            (ms >= 5000 ? console.info : console.debug)(`[Raw] [${uuid}] Update Count: ${total} parsed in ${ms} ms`);
        }
        const responseData = {
            'nearby': nearbyPokemons.length,
            'wild': wildPokemons.length,
            'forts': forts.length,
            'quests': quests.length,
            'fort_search': fortSearch.length,
            'encounters': encounters.length,
            'level': trainerLevel,
            'only_empty_gmos': containsGMO && isEmptyGMO,
            'only_invalid_gmos': containsGMO && isInvalidGMO,
            'contains_gmos': containsGMO
        };
        sendResponse(res, 'ok', responseData);
    }
}

module.exports = RouteController;
